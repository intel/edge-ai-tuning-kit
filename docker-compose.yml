# Copyright (C) 2025 Intel Corporation
# SPDX-License-Identifier: Apache-2.0 

services:
  frontend:
    build:
      context: ./frontend/admin
      dockerfile: Dockerfile
      args:
        SERVER_IP: $SERVER_IP
    image: edge-ai-tuning-kit.frontend:${APP_VER}-BINARY
    container_name: edge-ai-tuning-kit.frontend.ui
    hostname: ui
    restart: always
    environment:
      NEXT_PUBLIC_API_URL: $SERVER_IP
    depends_on:
      backend:
        condition: service_healthy
      task-runner:
        condition: service_healthy
      trainer-runner:
        condition: service_healthy
    networks:
      - app-network
    ports:
      - "$HOST:80:3000"
    command: "npm start"

  backend:
    build:
      context: ./backend/server
      dockerfile: Dockerfile
    image: edge-ai-tuning-kit.backend.server:${APP_VER}-BINARY
    container_name: edge-ai-tuning-kit.backend.server
    hostname: backend
    restart: always
    group_add:
      - ${DOCKER_GROUP_ID:-984}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - app-network
    extra_hosts:
      - "host.docker.internal:host-gateway"
    ports:
      - "$HOST:5999:5999"
    environment:
      APP_VER: ${APP_VER}-BINARY
      SERVER_PORT: $SERVER_PORT
      SERVER_HOST: $SERVER_HOST
      POSTGRES_URI: $POSTGRES_URI
      POSTGRES_PASSWORD: $POSTGRES_PASSWORD
      POSTGRES_USER: $POSTGRES_USER
      POSTGRES_DB: $POSTGRES_DB
      CELERY_BROKER_URL: redis://:$REDIS_PASSWORD@redis:6379/0
      CELERY_RESULT_BACKEND: redis://:$REDIS_PASSWORD@redis:6379/1
      HF_HOME: ./data/cache
      RENDER_GROUP_ID: $RENDER_GROUP_ID
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - cache-data:/usr/src/app/data
    command: './main'

  trainer-runner:
    build:
      context: ./backend/worker
      dockerfile: Dockerfile
    image: edge-ai-tuning-kit.backend.engine:${APP_VER}-BINARY
    container_name: edge-ai-tuning-kit.backend.trainer-runner
    hostname: trainer-runner
    restart: always
    group_add:
      - ${RENDER_GROUP_ID:-992}
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - app-network
    environment:
      USE_XETLA: "OFF"
      SYCL_CACHE_PERSISTENT: 1
      SYCL_PI_LEVEL_ZERO_USE_IMMEDIATE_COMMANDLISTS: 1
      CELERY_BROKER_URL: redis://:$REDIS_PASSWORD@redis:6379/0
      CELERY_RESULT_BACKEND: redis://:$REDIS_PASSWORD@redis:6379/1
      HF_HOME: ./data/cache
      HF_TOKEN: $HF_TOKEN
    volumes:
      - cache-data:/usr/src/app/data
      - ./deployment:/usr/src/app/assets/deployment
    devices:
      - /dev/dri:/dev/dri
    command: "celery -A app worker -E --pool=eventlet -Q trainer_queue --concurrency=1 --loglevel=INFO --statedb=/usr/src/app/data/worker.state"

  task-runner:
    image: edge-ai-tuning-kit.backend.engine:${APP_VER}-BINARY
    container_name: edge-ai-tuning-kit.backend.task-runner
    hostname: task-runner
    restart: always
    group_add:
      - ${RENDER_GROUP_ID:-992}
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - app-network
    environment:
      CELERY_BROKER_URL: redis://:$REDIS_PASSWORD@redis:6379/0
      CELERY_RESULT_BACKEND: redis://:$REDIS_PASSWORD@redis:6379/1
      HF_HOME: ./data/cache
      HF_TOKEN: $HF_TOKEN
    volumes:
      - cache-data:/usr/src/app/data
      - ./deployment:/usr/src/app/assets/deployment
    devices:
      - /dev/dri:/dev/dri
    command: "celery -A app worker -E --pool=eventlet -Q default_queue --concurrency=5 --loglevel=INFO --statedb=/usr/src/app/data/worker.state"

  postgres:
    image: postgres:16
    container_name: edge-ai-tuning-kit.backend.db
    restart: always
    environment:
      POSTGRES_USER: $POSTGRES_USER
      POSTGRES_PASSWORD: $POSTGRES_PASSWORD
      POSTGRES_DB: $POSTGRES_DB
    networks:
      - app-network
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "sh -c 'pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}'",
        ]
      interval: 10s
      timeout: 3s
      retries: 3
    volumes:
      - app-data:/var/lib/postgresql/data

  redis:
    image: redis:7
    container_name: edge-ai-tuning-kit.backend.task-db
    restart: always
    command: redis-server --requirepass ${REDIS_PASSWORD}
    environment:
      REDIS_PASSWORD: $REDIS_PASSWORD
    networks:
      - app-network
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "redis-cli --no-auth-warning -a $REDIS_PASSWORD ping | grep PONG",
        ]
      interval: 10s
      timeout: 3s
      retries: 3
    volumes:
      - task-data:/data

networks:
  app-network:
    name: edge-ai-tuning-kit-network
    driver: bridge

volumes:
  cache-data:
    name: edge-ai-tuning-kit-data-cache
  app-data:
    name: edge-ai-tuning-kit-database
  task-data:
    name: edge-ai-tuning-kit-task-cache
